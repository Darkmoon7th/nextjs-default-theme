---
description: 
globs: 
alwaysApply: true
---
# Project Architecture

## Overview

This project is a modern web application built with:

- **Next.js 15** with App Router
- **React 19** for UI components
- **Tailwind CSS 4** for styling
- **shadcn/ui** for high-quality accessible components
- **MDX** for content creation

## Directory Structure

```
├── src/
│   ├── app/                   # Next.js 15 App Router pages & layouts
│   │   ├── globals.css        # Tailwind CSS config & global styles
│   │   ├── layout.tsx         # Root layout with metadata configuration
│   │   └── page.tsx           # Home page component
│   │   └── [route]/           # Route-specific pages (about, pricing, etc.)
│   ├── components/            # React components
│   │   ├── ui/                # shadcn/ui components
│   │   ├── sections/          # Page section components
│   │   ├── layout/            # Layout components (header, footer, etc.)
│   │   └── [...]              # Other global components
│   └── lib/                   # Utility functions
├── public/                    # Static assets
├── fonts/                     # Local font files
├── .gitignore                 # Git ignore rules
├── .prettierrc                # Prettier configuration
├── components.json            # shadcn/ui components config
├── eslint.config.mjs          # ESLint configuration
├── next.config.ts             # Next.js configuration
├── package.json               # Dependencies and scripts
└── tsconfig.json              # TypeScript configuration
├── _worker.js                # Cloudflare Worker entry point
├── middleware.ts             # Edge middleware for URL handling
├── wrangler.toml             # Cloudflare Pages configuration
```

## Key Architecture Patterns

### Page Organization

- Uses Next.js 15 App Router
- Pages are defined in the `src/app` directory
- Each route has its own directory with a `page.tsx` file
- Shared layout with metadata in `src/app/layout.tsx`

### Component Organization

- **UI Components**: Reusable base components from shadcn/ui in `src/components/ui`
- **Section Components**: Page-specific content sections in `src/components/sections`
- **Layout Components**: Global layout elements in `src/components/layout`

### Theme & Styling

- Uses Tailwind CSS 4 with custom configuration
- Theme variables defined in `src/app/globals.css`
- Dark mode support through `next-themes`
- shadcn/ui components styled with Tailwind classes

### Client/Server Rendering

- Server components by default in Next.js 15
- Client components marked with `'use client'` directive
- Metadata API for SEO optimization

### Edge Runtime & Cloudflare Deployment

- Special files use the Edge runtime via `export const runtime = 'edge'`:
  - Root layout.tsx (required for Cloudflare compatibility)
  - Special files (sitemap.ts, robots.ts, manifest.ts)
  - Error handling (not-found.tsx)
- Marketing and content pages use static generation for optimal SEO
- Cloudflare Pages deployment using Wrangler
- Custom middleware for handling trailing slashes and redirects
- Special file routes (`sitemap.ts`, `robots.ts`, `manifest.ts`) for standard web conventions
- Worker-based routing via `_worker.js` for optimal performance

### Typography

- Uses a combination of custom and Google fonts:
  - DM Sans (local font)
  - DM Mono (Google font)
  - Inter (Google font)

## Examples

### Page Structure (src/app/page.tsx)

```tsx
export default function Home() {
  return (
    <>
      <CreamContainer className="via-muted to-muted/80">
        <Hero />
        <Logos />
        <Features />
        <ResourceAllocation />
      </CreamContainer>
      <Testimonials />
      <CreamContainer variant="bottom">
        <Pricing />
        <FAQ />
      </CreamContainer>
    </>
  );
}
```

### Component Structure (src/components/layout/navbar.tsx)

```tsx
// Client component with state management
'use client';

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  // Component implementation...
};
```

### UI Component Pattern (src/components/ui/button.tsx)

```tsx
const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg...',
  {
    variants: {
      variant: {
        /*...*/
      },
      size: {
        /*...*/
      },
    },
    defaultVariants: {
      /*...*/
    },
  },
);

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    // Component implementation...
  },
);

export { Button, buttonVariants };
```
